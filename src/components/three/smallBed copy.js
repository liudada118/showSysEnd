import Stats from "three/examples/jsm/libs/stats.module.js";
import * as THREE from "three";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
// import { FlyControls } from 'three/examples/jsm/controls/FlyControls.js';
import { TrackballControls } from "three/examples/jsm/controls/TrackballControls";
// import { SelectionBox } from 'three/addons/interactive/SelectionBox.js';
// import { SelectionHelper } from 'three/addons/interactive/SelectionHelper.js';
import React, { useEffect, useImperativeHandle, useRef, useState } from "react";
import { TextureLoader } from "three";
import { checkRectIndex, checkRectangleIntersection, getPointCoordinate, getPointCoordinateback } from "./threeUtil1";
import { SelectionHelper } from './SelectionHelper.js';
import {
  addSide,
  gaussBlur_1,
  interp1016,
  jet,
  jetWhite2,
  jetgGrey,
  findMax,
  interp
} from "../../assets/util/util";

import './index.scss'

const group = new THREE.Group();
const sitInit = 0;
const backInit = 0;
var newDiv, smoothValue = 0
var animationRequestId
const sitnum1 = 32;
const sitnum2 = 32;
const sitInterp = 2;
const sitOrder = 4;
let totalArr = [],
  totalPointArr = [];

let controlsFlag = true;
var newData1 = new Array(sitnum1 * sitnum2).fill(0), ndata1 = new Array(sitnum1 * sitnum2).fill(0), centerFlag = true;

var valuej1 = localStorage.getItem('carValuej') ? JSON.parse(localStorage.getItem('carValuej')) : 2655,
  valueg1 = localStorage.getItem('carValueg') ? JSON.parse(localStorage.getItem('carValueg')) : 3.3,
  value1 = localStorage.getItem('carValue') ? JSON.parse(localStorage.getItem('carValue')) : 2.08,
  valuel1 = localStorage.getItem('carValuel') ? JSON.parse(localStorage.getItem('carValuel')) : 4,
  valuef1 = localStorage.getItem('carValuef') ? JSON.parse(localStorage.getItem('carValuef')) : 0,
  ymax1 = localStorage.getItem('ymax') ? JSON.parse(localStorage.getItem('ymax')) : 251,
  valuej2 = localStorage.getItem('carValuej') ? JSON.parse(localStorage.getItem('carValuej')) : 200,
  valueg2 = localStorage.getItem('carValueg') ? JSON.parse(localStorage.getItem('carValueg')) : 2,
  value2 = localStorage.getItem('carValue') ? JSON.parse(localStorage.getItem('carValue')) : 2,
  valuel2 = localStorage.getItem('carValuel') ? JSON.parse(localStorage.getItem('carValuel')) : 2,
  valuef2 = localStorage.getItem('carValuef') ? JSON.parse(localStorage.getItem('carValuef')) : 2,
  valuelInit1 = localStorage.getItem('carValueInit') ? JSON.parse(localStorage.getItem('carValueInit')) : 2001,
  valuelInit2 = localStorage.getItem('carValueInit') ? JSON.parse(localStorage.getItem('carValueInit')) : 2;
let enableControls = true;
let isShiftPressed = false;


const Canvas = React.forwardRef((props, refs) => {

  var newDiv, newDiv1, selectStartArr = [], selectEndArr = [], sitArr, backArr, sitMatrix = [], backMatrix = [], selectMatrix = [], selectHelper, cooArr = [0, 0]
  let sitIndexArr = [], backIndexArr = []
  let dataFlag = false;
  const changeDataFlag = () => {
    dataFlag = true;

  };
  let particles,
    particlesPoint,
    material,
    sitGeometry,
    ndata1Num


  let bigArr = new Array(sitnum1 * sitInterp * sitnum2 * sitInterp).fill(1);
  let bigArrg = new Array(
    (sitnum1 * sitInterp + sitOrder * 2) *
    (sitnum2 * sitInterp + sitOrder * 2)
  ).fill(0),
    bigArrg1New = new Array(
      (sitnum1 * sitInterp + 2 * sitOrder) *
      (sitnum2 * sitInterp + 2 * sitOrder) * 2
    ).fill(1),
    bigArrgnew = new Array(
      (sitnum1 * sitInterp + sitOrder * 2) *
      (sitnum2 * sitInterp + sitOrder * 2)
    ).fill(0),
    smoothBig = new Array(
      (sitnum1 * sitInterp + sitOrder * 2) *
      (sitnum2 * sitInterp + sitOrder * 2) * 2
    ).fill(0);
  let i = 0;
  let ws,
    wsPointData,
    ws1

  let bodyArr
  let container, stats;

  let camera, scene, renderer;
  let controls;
  let cube, chair, mixer, clips;
  const clock = new THREE.Clock();
  var FPS = 10;
  var timeS = 0;
  var renderT = 1 / FPS;
  const ALT_KEY = 18;
  const CTRL_KEY = 17;
  const CMD_KEY = 91;
  const AMOUNTX = (sitnum1 * sitInterp + sitOrder * 2);
  const AMOUNTY = (sitnum2 * sitInterp + sitOrder * 2)*2 ;

  const SEPARATION = 100;
  let group = new THREE.Group();

  let positions1;
  let colors1, scales1;
  let positions;
  let colors, scales;

  function init() {
    container = document.getElementById(`canvas`);
    // camera

    camera = new THREE.PerspectiveCamera(
      40,
      window.innerWidth / window.innerHeight,
      1,
      150000
    );


    camera.position.z = 10;
    camera.position.y = 200;
    // camera.position.z = 1;
    // camera.position.y = 50;
    // camera.position.x = 100;

    // scene



    scene = new THREE.Scene();

    // model
    const loader = new GLTFLoader();
    // points  座椅

    initSet();

    initPoint();
    // scene.add(group);
    // group.rotation.y = Math.PI / 2
    group.position.x = 3
    group.position.y = 110
    group.position.z = 5
    scene.add(group);
    const helper = new THREE.GridHelper(2000, 100);
    helper.position.y = -199;
    helper.material.opacity = 0.25;
    helper.material.transparent = true;
    scene.add(helper);

    // lights
    const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444);
    hemiLight.position.set(0, 200, 0);
    scene.add(hemiLight);
    const dirLight = new THREE.DirectionalLight(0xffffff);
    dirLight.position.set(0, 200, 10);
    scene.add(dirLight);
    const dirLight1 = new THREE.DirectionalLight(0xffffff);
    dirLight1.position.set(0, 10, 200);
    scene.add(dirLight1);

    // renderer

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setPixelRatio(window.devicePixelRatio);
    // renderer.setSize(window.innerWidth, window.innerHeight);

    renderer.setSize(window.innerWidth, window.innerHeight);

    renderer.outputEncoding = THREE.sRGBEncoding;
    if (container.childNodes.length == 0) {
      container.appendChild(renderer.domElement);
    }

    renderer.setClearColor(0x000000);

    //FlyControls
    controls = new TrackballControls(camera, renderer.domElement);
    controls.dynamicDampingFactor = 0.2;
    controls.domElement = container;
    controls.mouseButtons = {
      LEFT: THREE.MOUSE.PAN, // make pan the default instead of rotate
      MIDDLE: THREE.MOUSE.ZOOM,
      RIGHT: THREE.MOUSE.ROTATE,
    };
    controls.keys = [
      ALT_KEY, // orbit
      CTRL_KEY, // zoom
      CMD_KEY, // pan
    ];

    window.addEventListener("resize", onWindowResize);

    renderer.domElement.addEventListener(
      "click",
      () => {

      },
      false
    );


    selectHelper = new SelectionHelper(renderer, controls, 'selectBox');

    document.addEventListener('pointerdown', pointDown);

    document.addEventListener('pointermove', pointMove);

    document.addEventListener('pointerup', pointUp);

    const x = localStorage.getItem('bedx')
    if (x) group.rotation.x = -(Number(x) * 6) / 12
    const z = localStorage.getItem('bedz')
    if (z) group.rotation.z = Number(z) * 6 / 12

  }

  function pointDown(event) {
    selectStartArr = []
    selectEndArr = []
    if (selectHelper.isShiftPressed) {

      sitIndexArr = []
      backIndexArr = []

      selectStartArr = [(event.clientX), event.clientY]


      // group.position.x = -10
      // group.position.y = 110
      // group.position.z =5


      sitArr = getPointCoordinate({
        particles, camera, position: { x: group.position.x, y: group.position.y, z: group.position.z },
        //  axis1 : [0,1,0] ,angle1 : particles.rotation.y
      })
      // backArr = getPointCoordinateback({ particles: particles1, camera, position: { x: -10, y: 110, z: 5 }, width: AMOUNTX1 })

      sitMatrix = [sitArr[0].x, sitArr[0].y, sitArr[1].x, sitArr[1].y]
      // backMatrix = [backArr[1].x, backArr[0].y, backArr[0].x, backArr[1].y]
      console.log(sitMatrix, 'sitMatrix')

      // const newDiv = document.createElement('div');

      // newDiv.classList.add('my-class');
      // // 设置 <div> 的属性、内容或样式
      // newDiv.style.backgroundColor = 'lightblue';
      // // newDiv.style.padding = '10px';
      // newDiv.style.width = `${100}px`
      // newDiv.style.height = `${100}px`
      // // newDiv.style.left = `${viewportPosition.x}px`
      // // newDiv.style.top = `${viewportPosition.y}px`
      // // newDiv.style.left = `${vector.x}px`
      // // newDiv.style.top = `${vector.y}px`
      // newDiv.style.left = `${backMatrix[2]}px`
      // newDiv.style.top = `${backMatrix[3]}px`

      // // 将 <div> 元素添加到页面中的某个元素中
      // document.body?.appendChild(newDiv);

    }
  }

  function pointMove(event) {
    if (selectHelper.isShiftPressed) {


      selectEndArr = [(event.clientX), event.clientY,]



      selectMatrix = [...selectStartArr, ...selectEndArr]

      if (selectStartArr[0] > selectEndArr[0]) {
        // selectMatrix = [...selectEndArr , ...selectStartArr]
        selectMatrix[0] = selectEndArr[0]
        selectMatrix[2] = selectStartArr[0]
      } else {
        selectMatrix[0] = selectStartArr[0]
        selectMatrix[2] = selectEndArr[0]
      }

      if (selectStartArr[1] > selectEndArr[1]) {
        selectMatrix[1] = selectEndArr[1]
        selectMatrix[3] = selectStartArr[1]
      } else {
        selectMatrix[1] = selectStartArr[1]
        selectMatrix[3] = selectEndArr[1]
      }


      // if (!controlsFlag && selectHelper.isDown) {
      //   const sitInterArr = checkRectangleIntersection(selectMatrix, sitMatrix)
      //   // const backInterArr = checkRectangleIntersection(selectMatrix, backMatrix)

      //   if (sitInterArr) sitIndexArr = checkRectIndex(sitMatrix, sitInterArr, AMOUNTX, AMOUNTY)
      //   console.log(sitIndexArr)
      //   // if (backInterArr) backIndexArr = checkRectIndex(backMatrix, backInterArr, AMOUNTX1, AMOUNTY1)
      //   props.changeSelect({ sit: sitIndexArr,
      //     //  back: backIndexArr
      //     })
      // }

    }
  }

  function pointUp(event) {
    console.log('up')
    const sitInterArr = checkRectangleIntersection(selectMatrix, sitMatrix)
    // const backInterArr = checkRectangleIntersection(selectMatrix, backMatrix)

    if (sitInterArr) sitIndexArr = checkRectIndex(sitMatrix, sitInterArr, AMOUNTX, AMOUNTY)

    // if (backInterArr) backIndexArr = checkRectIndex(backMatrix, backInterArr, AMOUNTX1, AMOUNTY1)
    props.changeSelect({
      sit: [...sitIndexArr],
      //  back: backIndexArr
    })
    if (selectHelper.isShiftPressed) {
      selectStartArr = []
      selectEndArr = []
    }
  }

  //   初始化座椅
  function initSet() {
    // const AMOUNTX = 1
    // const AMOUNTY = 1
    const numParticles = AMOUNTX * AMOUNTY;
    positions = new Float32Array(numParticles * 3);
    scales = new Float32Array(numParticles);
    colors = new Float32Array(numParticles * 3);
    let i = 0,
      j = 0;

    for (let ix = 0; ix < AMOUNTX; ix++) {
      for (let iy = 0; iy < AMOUNTY; iy++) {
        positions[i] = ix * SEPARATION - (AMOUNTX * SEPARATION) / 2; // x
        positions[i + 1] = 0; // y
        positions[i + 2] = iy * SEPARATION - (AMOUNTY * SEPARATION) / 2; // z

        scales[j] = 1;
        colors[i] = 0 / 255;
        colors[i + 1] = 0 / 255;
        colors[i + 2] = 255 / 255;
        i += 3;
        j++;
      }
    }

    sitGeometry = new THREE.BufferGeometry();
    sitGeometry.setAttribute(
      "position",
      new THREE.BufferAttribute(positions, 3)
    );
    function getTexture() {
      return new TextureLoader().load("");
    }
    // require("../../assets/images/circle.png")
    const spite = new THREE.TextureLoader().load("./circle.png");
    material = new THREE.PointsMaterial({
      vertexColors: true,
      transparent: true,
      //   color: 0xffffff,
      map: spite,
      size: 1,
    });
    sitGeometry.setAttribute("scale", new THREE.BufferAttribute(scales, 1));
    sitGeometry.setAttribute("color", new THREE.BufferAttribute(colors, 3));
    particles = new THREE.Points(sitGeometry, material);

    particles.scale.x = 0.0062;
    particles.scale.y = 0.0062;
    particles.scale.z = 0.0062;
    // particles.rotation.y = Math.PI / 2

    // particles.rotation.x = Math.PI / 4;
    // particles.rotation.y = 0; //-Math.PI / 2;
    // particles.rotation.y = Math.PI
    // particles.rotation.z = Math.PI
    // scene.add(particles);
    group.add(particles);


    //
    // const position = particles.geometry.attributes.position;

    // const screenCoordinates = [];
    // const dataArr = [0, 2879]
    // for (let i = 0; i < dataArr.length; i++) {
    //   const vertex = new THREE.Vector3();
    //   vertex.fromBufferAttribute(position, dataArr[i]); // 获取顶点的世界坐标
    //   const geometry = new THREE.BufferGeometry();
    //   const vertices = new Float32Array([vertex.x, vertex.y, vertex.z])
    //   const colors = new Float32Array([1, 0, 0])
    //   console.log(vertices, 'vertices')
    //   geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
    //   geometry.setAttribute("color", new THREE.BufferAttribute(colors, 3));
    //   const point = new THREE.Points(geometry, material);

    //   group.add(point);
    //   point.scale.x = 0.0062;
    //   point.scale.y = 0.0062;
    //   point.scale.z = 0.0062;
    //   point.position.x = -15
    //   point.position.y = -1000
    //   point.position.z = 230

    //   const vector = new THREE.Vector3();
    //   var widthHalf = 0.5 * window.innerWidth;  //此处应使用画布长和宽
    //   var heightHalf = 0.5 * window.innerHeight;

    //   point.updateMatrixWorld(); // 函数updateMatrix()和updateMatrixWorld(force)将根据position，rotation或quaternion，scale参数更新matrix和matrixWorld。updateMatrixWorld还会更新所有后代元素的matrixWorld，如果force值为真则调用者本身的matrixWorldNeedsUpdate值为真。

    //   //getPositionFromMatrix()方法已经删除,使用setFromMatrixPosition()替换, setFromMatrixPosition方法将返回从矩阵中的元素得到的新的向量值的向量
    //   vector.setFromMatrixPosition(point.matrixWorld);

    //   //projectOnVector方法在将当前三维向量(x,y,z)投影一个向量到另一个向量,参数vector(x,y,z).
    //   vector.project(camera);

    //   vector.x = (vector.x * widthHalf) + widthHalf;
    //   vector.y = -(vector.y * heightHalf) + heightHalf;
    //   console.log(vector.x, vector.y,)
    // }
    // console.log(group)
  }
  // 初始化靠背


  function initPoint() {
    const geometry = new THREE.PlaneGeometry(2, 2);
    const spite = new THREE.TextureLoader().load("./circle.png");
    const material = new THREE.MeshBasicMaterial({ color: 0x991BFA, map: spite, transparent: true, });
    particlesPoint = new THREE.Mesh(geometry, material);

    particlesPoint.rotation.x = -Math.PI / 2
    particlesPoint.position.y = 10

    particlesPoint.position.x = -10 + 48
    particlesPoint.position.z = -19 + 38.5
    group.add(particlesPoint);

  }
  //

  function onWindowResize() {
    renderer.setSize(window.innerWidth, window.innerHeight);

    camera.aspect = window.innerWidth / window.innerHeight;

    // camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
  }

  //模型动画

  function animate() {
    animationRequestId = requestAnimationFrame(animate);
    const date = new Date().getTime();

    render();
  }


  //  更新靠背数据


  //  更新座椅数据
  function sitRenew() {

    ndata1 = [...newData1].map((a, index) => (a - valuef1 < 0 ? 0 : a));
    
    const realArr = []
    for (let i = 0; i < 64; i++) {
      let num = 0
      for (let j = 0; j < 32; j++) {
        num += ndata1[j * 64 + i]
      }
      smoothValue = smoothValue + (num / 32 - smoothValue) / 3
      realArr.push(smoothValue)
    }

    props.handleChartsBody1(realArr, ymax1 / 2)

    ndata1Num = ndata1.reduce((a, b) => a + b, 0);
    if (ndata1Num < valuelInit1) {
      ndata1 = new Array(sitnum1 * sitnum2).fill(0);
    }

    // ndata1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,48,25,8,0,1,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,7,28,37,6,0,0,0,0,0,0,0,0,0,1,1,6,2,4,0,0,0,0,0,0,0,1,0,1,0,0,1,3,11,22,52,35,2,2,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,31,50,14,1,1,0,0,0,0,0,0,0,1,7,19,9,2,0,1,0,0,0,0,0,0,0,0,0,0,1,9,30,48,30,5,3,5,9,7,3,0,0,0,0,1,30,63,35,6,1,0,0,0,0,0,0,0,0,0,0,0,0,5,46,49,10,2,1,1,5,12,8,0,0,0,0,4,72,25,35,7,1,0,0,0,0,0,0,0,0,0,0,0,0,16,24,26,5,1,0,0,2,14,54,0,0,0,0,7,59,52,40,27,4,1,1,0,0,0,0,0,0,0,0,0,1,23,33,12,1,0,0,0,3,27,60,0,0,0,0,20,46,46,35,32,9,1,0,0,0,0,0,0,0,0,0,1,2,22,21,14,2,1,0,2,6,39,83,0,0,0,0,21,41,38,44,52,26,2,0,0,0,0,0,0,0,0,0,0,2,24,19,11,2,0,0,0,9,65,77,0,0,0,0,38,63,44,41,55,38,6,1,0,0,0,0,0,0,0,0,0,0,14,14,17,2,1,0,0,19,36,47,0,0,0,0,20,73,37,39,55,54,26,3,1,0,0,0,0,0,0,0,0,1,40,17,13,10,1,0,0,1,8,23,0,0,0,2,46,66,29,31,54,55,30,14,4,0,0,0,0,0,0,0,0,1,10,48,14,6,4,1,0,1,6,8,0,0,0,1,36,60,40,17,42,54,58,15,4,0,0,0,0,0,0,0,1,4,20,26,29,14,5,11,2,1,3,2,0,0,2,1,83,42,18,17,34,59,48,21,7,1,0,0,1,0,1,2,1,1,13,21,17,17,11,18,4,1,1,0,0,0,0,0,46,45,14,5,22,42,44,36,12,2,1,1,1,0,0,1,0,3,6,32,41,40,18,17,8,1,1,0,0,0,0,0,31,35,6,2,15,52,42,20,14,6,2,3,3,3,3,4,1,3,7,12,34,52,43,41,12,2,1,0,0,0,0,0,52,30,4,1,12,28,27,32,13,6,3,5,7,16,9,33,9,19,6,7,40,28,16,30,33,4,1,0,0,0,0,0,35,29,5,0,14,26,43,18,21,9,4,7,14,13,7,16,13,19,15,6,23,46,23,28,33,3,1,0,0,0,0,0,25,18,2,0,2,17,21,29,20,22,9,10,14,11,20,31,27,22,20,10,18,57,36,40,40,1,0,1,0,0,0,0,23,22,1,0,2,16,22,25,29,48,20,15,26,16,13,16,15,15,9,10,12,37,54,44,14,0,0,1,0,0,0,0,47,12,1,0,2,12,29,40,35,40,25,17,27,14,13,10,16,13,13,17,10,29,32,48,4,0,0,0,0,0,0,0,53,5,0,0,6,6,33,45,37,67,43,31,28,15,7,9,12,10,10,8,4,15,18,7,1,0,0,0,0,0,0,1,29,1,0,0,2,4,19,56,40,45,78,36,42,15,6,6,7,8,2,3,1,2,4,1,0,0,0,0,0,0,1,1,13,1,0,0,0,2,16,52,61,39,52,39,44,13,9,1,1,2,1,2,0,1,1,1,0,0,0,0,0,0,1,0,12,0,0,0,1,4,14,22,51,33,27,29,44,12,3,1,0,1,1,3,1,1,1,0,0,0,0,0,0,1,1,2,4,0,1,0,1,3,12,29,85,56,38,31,11,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,2,3,0,0,0,1,4,12,29,85,56,37,30,11,1,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0,2,3,21,16,3,7,2,7,3,8,15,30,20,7,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,35,44,7,3,1,3,2,7,10,8,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,19,51,2,1,1,1,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,18,57,32,3,4,8,5,1,3,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    // ndata1 = [0,0,0,0,0,0,0,0,10,4,1,23,2,1,9,57,61,46,31,93,47,21,18,9,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,15,3,2,2,7,30,19,13,43,53,46,45,25,14,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,2,2,2,2,4,3,7,87,46,39,46,44,13,5,1,1,0,0,0,0,3,0,0,0,0,0,0,0,1,1,1,2,2,2,2,1,2,1,1,16,10,27,96,49,38,9,2,1,0,0,0,0,55,3,2,1,1,1,1,1,2,3,4,7,5,3,2,1,2,1,4,7,6,8,7,27,84,22,2,1,0,0,1,1,24,18,11,4,10,12,4,4,9,8,19,25,31,10,4,2,2,0,1,3,3,4,8,61,87,26,4,1,0,1,9,7,11,35,28,17,20,31,8,9,13,13,27,24,40,26,5,1,1,0,0,1,2,2,3,22,35,49,9,1,0,1,9,32,2,11,11,16,16,30,8,26,18,19,45,34,29,41,19,3,1,1,1,2,2,5,8,32,31,44,19,1,0,0,9,28,1,3,4,16,15,16,13,15,18,18,23,23,43,43,51,4,1,1,1,4,4,11,12,23,34,63,31,2,2,4,18,39,1,1,0,2,3,11,17,20,20,24,19,28,34,35,43,7,5,3,1,4,11,13,15,16,66,46,42,6,0,4,19,45,0,0,0,0,0,2,5,9,15,24,27,34,43,55,39,11,8,7,4,15,11,17,17,27,37,44,32,13,2,8,23,34,0,0,0,0,0,1,1,2,9,21,22,32,56,46,43,11,14,4,9,28,30,26,25,22,28,28,31,28,5,10,17,18,0,0,0,0,1,0,0,1,3,8,23,41,59,48,31,14,20,2,10,25,27,37,31,42,33,20,30,25,7,7,3,3,0,0,0,0,0,0,1,0,2,7,35,28,39,22,34,28,9,1,6,23,37,43,34,19,42,29,22,23,10,2,1,1,0,0,0,0,0,1,0,1,2,5,29,49,81,40,42,30,6,2,3,6,14,20,22,16,26,39,32,23,7,2,1,0,0,0,0,2,0,0,0,0,2,9,38,43,62,41,32,18,5,7,9,25,22,22,23,18,30,29,27,17,3,0,1,1,0,0,0,0,0,0,1,2,5,13,24,54,51,39,24,16,34,17,12,32,36,23,23,14,29,44,23,16,1,0,1,1,0,0,0,0,1,3,12,12,20,23,29,34,19,39,30,10,7,3,10,27,30,35,33,17,34,39,21,14,0,0,1,1,1,0,0,1,4,16,15,14,21,29,42,35,27,29,26,15,9,2,4,14,22,21,23,20,33,50,27,11,0,0,1,1,1,1,1,6,24,24,28,18,23,28,23,32,30,33,15,4,3,1,1,4,12,11,26,23,45,47,30,3,0,0,1,1,7,4,4,24,22,44,31,12,14,41,22,35,32,33,7,6,2,0,1,2,3,3,7,26,25,23,26,3,0,0,0,0,31,18,8,22,14,35,22,7,8,37,25,25,26,11,2,2,1,0,0,2,1,3,5,34,25,25,17,1,0,0,0,0,53,12,4,2,1,3,2,1,1,4,3,4,11,4,1,4,0,0,1,2,3,2,4,8,23,24,5,0,0,0,0,0,31,4,1,1,0,1,2,0,0,2,2,2,2,2,0,1,0,1,0,3,1,2,4,9,28,19,2,0,0,0,0,0,18,5,2,2,2,3,1,0,1,4,4,3,5,1,1,2,1,3,3,6,4,6,17,35,35,9,2,0,0,0,1,0,8,4,1,1,1,3,1,1,0,5,6,4,6,1,1,3,2,5,5,9,6,10,22,25,28,5,1,0,0,0,0,0,3,2,0,0,0,1,0,0,0,4,11,8,16,1,1,3,5,15,29,40,32,41,28,27,12,3,2,0,0,0,0,1,3,1,1,0,0,1,0,0,0,4,12,8,17,1,1,3,6,15,28,39,33,42,28,28,11,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,29,76,2,3,23,34,30,54,48,24,5,4,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,18,13,26,0,14,32,36,47,63,28,8,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,13,14,41,1,3,23,10,4,4,2,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,4,15,21,10,0,1,2,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1]
    interp(ndata1, bigArr, sitnum1, sitInterp);
    let bigArrs = addSide(
      bigArr,
      sitnum2 * sitInterp,
      sitnum1 * sitInterp,
      sitOrder,
      sitOrder
    );

    gaussBlur_1(
      bigArrs,
      bigArrg,
      sitnum2 * sitInterp + sitOrder * 2,
      sitnum1 * sitInterp + sitOrder * 2,
      valueg1
    );

    bodyArr = []

    for (let i = 0; i < 72; i++) {
      for (let j = 0; j < 72; j++) {
        bigArrg1New[(i*2 ) * 72 + j*2] = bigArrg[i * 72 + j]
        bigArrg1New[(i*2 ) * 72 + (j*2 + 1)] = bigArrg[i * 72 + j]
        // bigArrg1New[(i * 2 + 1) * 72 + j] = bigArrg1[i * 72 + j]
      }
    }

    bigArrg1New = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,6,6,5,5,4,4,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,6,6,8,8,10,10,11,11,12,12,12,12,12,12,12,12,13,13,14,14,14,14,14,14,12,12,11,11,9,9,8,8,6,6,5,5,4,4,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,7,7,10,10,14,14,17,17,20,20,21,21,22,22,22,22,23,23,24,24,26,26,26,26,26,26,24,24,21,21,18,18,15,15,12,12,10,10,8,8,6,6,5,5,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,4,4,4,4,5,5,6,6,6,6,7,7,8,8,7,7,7,7,7,7,8,8,11,11,16,16,21,21,27,27,31,31,34,34,35,35,35,35,37,37,39,39,41,41,43,43,43,43,40,40,35,35,30,30,25,25,21,21,17,17,14,14,11,11,8,8,6,6,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,6,6,6,7,7,9,9,10,10,10,10,10,10,9,9,9,9,11,11,15,15,21,21,29,29,36,36,42,42,46,46,47,47,49,49,51,51,54,54,59,59,62,62,62,62,59,59,53,53,46,46,40,40,34,34,28,28,23,23,18,18,13,13,10,10,7,7,5,5,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,6,7,7,9,9,10,10,12,12,13,13,12,12,11,11,11,11,12,12,17,17,24,24,33,33,42,42,49,49,53,53,56,56,58,58,61,61,67,67,74,74,79,79,80,80,77,77,71,71,64,64,57,57,49,49,42,42,34,34,27,27,20,20,15,15,10,10,7,7,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,6,8,8,9,9,11,11,13,13,14,14,13,13,12,12,12,12,13,13,17,17,24,24,33,33,41,41,49,49,54,54,57,57,60,60,65,65,73,73,82,82,90,90,93,93,92,92,87,87,80,80,73,73,65,65,57,57,47,47,38,38,29,29,21,21,14,14,9,9,6,6,4,4,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,4,4,5,5,6,6,7,7,9,9,11,11,12,12,13,13,13,13,12,12,11,11,12,12,15,15,21,21,28,28,36,36,43,43,48,48,52,52,56,56,62,62,72,72,84,84,93,93,99,99,100,100,97,97,92,92,86,86,79,79,71,71,61,61,49,49,38,38,28,28,19,19,12,12,8,8,5,5,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,4,4,5,5,6,6,8,8,10,10,11,11,12,12,12,12,11,11,10,10,11,11,13,13,17,17,22,22,28,28,33,33,38,38,42,42,46,46,54,54,65,65,78,78,90,90,97,97,100,100,100,100,98,98,95,95,91,91,84,84,74,74,62,62,48,48,36,36,25,25,16,16,10,10,6,6,4,4,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,6,6,6,5,5,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,5,5,6,6,7,7,9,9,10,10,11,11,11,11,10,10,10,10,9,9,10,10,13,13,16,16,20,20,23,23,27,27,30,30,36,36,44,44,55,55,68,68,80,80,88,88,93,93,96,96,97,97,99,99,98,98,93,93,85,85,73,73,59,59,45,45,32,32,21,21,13,13,8,8,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,5,5,7,7,9,9,10,10,10,10,9,9,7,7,5,5,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,5,5,6,6,8,8,9,9,10,10,11,11,11,11,11,11,10,10,9,9,9,9,10,10,11,11,13,13,16,16,18,18,21,21,26,26,33,33,44,44,55,55,66,66,74,74,80,80,86,86,91,91,96,96,99,99,99,99,93,93,83,83,70,70,55,55,40,40,27,27,17,17,10,10,6,6,3,3,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,4,4,7,7,11,11,14,14,16,16,16,16,14,14,11,11,8,8,6,6,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,7,7,8,8,9,9,11,11,12,12,13,13,14,14,13,13,12,12,11,11,9,9,9,9,9,9,9,9,10,10,12,12,14,14,18,18,24,24,32,32,42,42,51,51,58,58,65,65,71,71,79,79,88,88,95,95,99,99,98,98,92,92,81,81,66,66,49,49,34,34,21,21,12,12,7,7,4,4,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,1,1,3,3,6,6,10,10,15,15,20,20,23,23,23,23,20,20,16,16,13,13,10,10,8,8,8,8,7,7,7,7,7,7,6,6,6,6,6,6,6,6,7,7,8,8,9,9,11,11,13,13,15,15,17,17,19,19,19,19,18,18,16,16,14,14,12,12,10,10,8,8,8,8,8,8,8,8,10,10,12,12,17,17,23,23,30,30,36,36,43,43,49,49,56,56,65,65,76,76,87,87,95,95,100,100,98,98,90,90,76,76,58,58,41,41,26,26,15,15,9,9,5,5,3,3,3,3,3,3,4,4,4,4,5,5,4,4,4,4,3,3,2,2,2,2,4,4,7,7,12,12,18,18,24,24,28,28,29,29,27,27,23,23,19,19,15,15,13,13,12,12,12,12,12,12,11,11,11,11,10,10,9,9,9,9,10,10,11,11,13,13,16,16,19,19,22,22,25,25,26,26,27,27,25,25,23,23,19,19,15,15,12,12,9,9,7,7,7,7,6,6,7,7,8,8,11,11,15,15,20,20,25,25,30,30,35,35,42,42,51,51,63,63,76,76,88,88,98,98,101,101,97,97,84,84,66,66,47,47,31,31,18,18,10,10,6,6,4,4,4,4,4,4,6,6,7,7,7,7,7,7,6,6,5,5,3,3,2,2,4,4,7,7,12,12,19,19,26,26,32,32,34,34,33,33,29,29,25,25,22,22,20,20,19,19,18,18,18,18,17,17,16,16,15,15,14,14,14,14,15,15,16,16,19,19,22,22,26,26,30,30,34,34,36,36,37,37,35,35,32,32,27,27,21,21,16,16,12,12,8,8,7,7,6,6,6,6,6,6,8,8,11,11,14,14,17,17,20,20,24,24,30,30,39,39,51,51,65,65,81,81,94,94,101,101,100,100,90,90,73,73,53,53,35,35,21,21,12,12,7,7,5,5,5,5,6,6,8,8,10,10,11,11,11,11,9,9,7,7,5,5,3,3,3,3,7,7,12,12,19,19,26,26,33,33,36,36,37,37,35,35,32,32,29,29,27,27,26,26,26,26,25,25,24,24,23,23,21,21,19,19,19,19,20,20,22,22,25,25,29,29,34,34,39,39,44,44,46,46,47,47,46,46,41,41,35,35,28,28,21,21,15,15,10,10,7,7,6,6,5,5,5,5,6,6,7,7,9,9,11,11,14,14,17,17,22,22,30,30,41,41,56,56,72,72,88,88,98,98,99,99,92,92,76,76,57,57,39,39,25,25,14,14,9,9,6,6,6,6,8,8,11,11,14,14,16,16,16,16,13,13,10,10,7,7,4,4,3,3,6,6,10,10,17,17,24,24,31,31,36,36,38,38,38,38,36,36,34,34,33,33,33,33,33,33,33,33,31,31,29,29,27,27,25,25,25,25,26,26,28,28,32,32,37,37,42,42,48,48,53,53,56,56,58,58,56,56,52,52,45,45,36,36,27,27,19,19,13,13,9,9,6,6,5,5,4,4,5,5,6,6,7,7,8,8,10,10,13,13,17,17,24,24,35,35,49,49,65,65,81,81,92,92,96,96,91,91,78,78,61,61,43,43,28,28,17,17,10,10,7,7,8,8,10,10,14,14,18,18,21,21,21,21,18,18,13,13,9,9,5,5,3,3,5,5,8,8,14,14,21,21,28,28,33,33,37,37,38,38,38,38,37,37,37,37,37,37,38,38,38,38,37,37,35,35,33,33,31,31,31,31,32,32,34,34,38,38,43,43,50,50,56,56,61,61,65,65,66,66,65,65,61,61,54,54,45,45,35,35,25,25,17,17,11,11,7,7,5,5,4,4,4,4,5,5,6,6,7,7,9,9,11,11,15,15,21,21,30,30,43,43,59,59,74,74,86,86,91,91,89,89,79,79,64,64,47,47,32,32,20,20,12,12,9,9,9,9,12,12,17,17,22,22,26,26,25,25,22,22,16,16,11,11,6,6,2,2,4,4,7,7,11,11,17,17,23,23,29,29,33,33,35,35,37,37,37,37,38,38,39,39,41,41,41,41,41,41,39,39,37,37,36,36,36,36,37,37,40,40,44,44,49,49,55,55,61,61,67,67,71,71,73,73,73,73,70,70,63,63,54,54,43,43,32,32,22,22,14,14,9,9,6,6,4,4,4,4,5,5,5,5,7,7,9,9,11,11,15,15,20,20,29,29,40,40,54,54,69,69,81,81,88,88,88,88,81,81,68,68,52,52,36,36,23,23,15,15,11,11,11,11,15,15,21,21,26,26,30,30,30,30,26,26,19,19,12,12,7,7,2,2,3,3,5,5,8,8,12,12,18,18,23,23,27,27,30,30,32,32,34,34,36,36,38,38,40,40,41,41,41,41,41,41,39,39,39,39,39,39,41,41,44,44,48,48,53,53,59,59,64,64,70,70,74,74,77,77,79,79,77,77,72,72,63,63,52,52,39,39,27,27,18,18,11,11,7,7,5,5,5,5,5,5,6,6,7,7,10,10,12,12,16,16,21,21,29,29,39,39,52,52,66,66,78,78,86,86,88,88,83,83,72,72,56,56,40,40,27,27,17,17,13,13,13,13,17,17,24,24,30,30,34,34,34,34,29,29,22,22,14,14,8,8,1,1,2,2,4,4,6,6,9,9,13,13,17,17,20,20,24,24,27,27,29,29,32,32,35,35,37,37,39,39,40,40,40,40,40,40,40,40,41,41,43,43,46,46,50,50,54,54,60,60,66,66,71,71,76,76,80,80,83,83,83,83,79,79,71,71,60,60,46,46,33,33,22,22,14,14,9,9,6,6,6,6,6,6,8,8,9,9,12,12,15,15,19,19,24,24,31,31,41,41,52,52,65,65,78,78,87,87,90,90,87,87,77,77,62,62,45,45,31,31,21,21,15,15,16,16,20,20,27,27,34,34,38,38,38,38,32,32,24,24,15,15,9,9,1,1,2,2,3,3,4,4,6,6,9,9,12,12,14,14,17,17,20,20,23,23,26,26,29,29,32,32,34,34,36,36,37,37,38,38,40,40,41,41,44,44,47,47,51,51,55,55,60,60,65,65,71,71,77,77,82,82,86,86,87,87,85,85,78,78,66,66,52,52,38,38,25,25,16,16,11,11,8,8,8,8,8,8,10,10,12,12,15,15,18,18,22,22,27,27,34,34,42,42,54,54,66,66,79,79,88,88,93,93,91,91,81,81,67,67,50,50,35,35,24,24,18,18,18,18,22,22,30,30,37,37,42,42,41,41,35,35,25,25,16,16,9,9,1,1,1,1,2,2,3,3,4,4,6,6,8,8,10,10,12,12,14,14,17,17,20,20,23,23,26,26,28,28,31,31,33,33,35,35,37,37,40,40,43,43,47,47,51,51,55,55,60,60,65,65,71,71,77,77,84,84,88,88,91,91,89,89,83,83,72,72,57,57,42,42,29,29,19,19,14,14,11,11,10,10,11,11,13,13,15,15,19,19,22,22,26,26,31,31,37,37,45,45,56,56,68,68,80,80,90,90,95,95,93,93,84,84,70,70,54,54,38,38,27,27,21,21,21,21,25,25,33,33,40,40,44,44,43,43,36,36,26,26,17,17,9,9,1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,6,8,8,9,9,12,12,14,14,17,17,19,19,22,22,25,25,28,28,31,31,34,34,37,37,41,41,45,45,49,49,54,54,59,59,65,65,71,71,78,78,86,86,91,91,94,94,93,93,87,87,75,75,61,61,45,45,32,32,22,22,16,16,13,13,13,13,14,14,17,17,20,20,24,24,27,27,31,31,36,36,41,41,48,48,58,58,69,69,81,81,90,90,95,95,93,93,85,85,72,72,57,57,41,41,30,30,24,24,23,23,27,27,34,34,41,41,45,45,43,43,36,36,26,26,17,17,9,9,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,5,5,6,6,7,7,9,9,11,11,14,14,16,16,19,19,22,22,25,25,29,29,33,33,37,37,42,42,47,47,53,53,59,59,65,65,73,73,81,81,89,89,95,95,98,98,96,96,90,90,78,78,63,63,48,48,35,35,25,25,20,20,16,16,16,16,18,18,22,22,26,26,30,30,34,34,38,38,41,41,46,46,52,52,60,60,70,70,80,80,88,88,92,92,91,91,84,84,72,72,58,58,44,44,33,33,27,27,25,25,29,29,35,35,41,41,44,44,42,42,35,35,25,25,16,16,9,9,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,6,6,7,7,9,9,11,11,14,14,17,17,20,20,24,24,28,28,33,33,38,38,44,44,51,51,58,58,66,66,74,74,83,83,92,92,98,98,101,101,99,99,92,92,80,80,65,65,50,50,38,38,28,28,23,23,20,20,20,20,23,23,27,27,32,32,37,37,41,41,45,45,48,48,52,52,56,56,63,63,70,70,78,78,85,85,88,88,87,87,81,81,71,71,59,59,46,46,36,36,29,29,27,27,29,29,34,34,39,39,41,41,38,38,31,31,23,23,14,14,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,6,6,7,7,9,9,12,12,15,15,18,18,22,22,28,28,34,34,41,41,48,48,57,57,66,66,76,76,86,86,95,95,102,102,104,104,102,102,94,94,81,81,67,67,52,52,40,40,31,31,25,25,23,23,23,23,27,27,32,32,38,38,44,44,49,49,52,52,55,55,58,58,61,61,66,66,71,71,77,77,81,81,84,84,82,82,78,78,70,70,59,59,48,48,38,38,31,31,28,28,29,29,32,32,35,35,36,36,33,33,27,27,19,19,12,12,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,6,8,8,10,10,13,13,17,17,22,22,29,29,37,37,45,45,55,55,66,66,77,77,88,88,97,97,104,104,106,106,102,102,94,94,82,82,68,68,54,54,42,42,33,33,27,27,25,25,26,26,30,30,37,37,44,44,50,50,56,56,60,60,62,62,64,64,67,67,69,69,73,73,76,76,78,78,79,79,78,78,74,74,68,68,59,59,49,49,40,40,33,33,28,28,27,27,28,28,30,30,29,29,27,27,21,21,15,15,10,10,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,5,5,7,7,10,10,13,13,18,18,24,24,33,33,42,42,53,53,65,65,78,78,89,89,99,99,105,105,106,106,102,102,93,93,81,81,68,68,55,55,44,44,34,34,29,29,26,26,27,27,32,32,39,39,47,47,55,55,61,61,66,66,68,68,70,70,71,71,73,73,74,74,76,76,77,77,77,77,75,75,72,72,66,66,59,59,50,50,41,41,33,33,28,28,25,25,24,24,24,24,23,23,20,20,16,16,11,11,7,7,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,4,4,5,5,7,7,10,10,14,14,21,21,29,29,39,39,52,52,65,65,78,78,90,90,100,100,105,105,105,105,100,100,92,92,81,81,68,68,56,56,45,45,35,35,29,29,26,26,27,27,32,32,40,40,49,49,57,57,64,64,69,69,72,72,73,73,74,74,74,74,75,75,76,76,76,76,75,75,73,73,70,70,65,65,58,58,50,50,41,41,33,33,26,26,22,22,20,20,18,18,17,17,14,14,11,11,8,8,5,5,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,5,5,8,8,12,12,18,18,27,27,38,38,51,51,65,65,80,80,92,92,101,101,105,105,105,105,100,100,91,91,81,81,69,69,57,57,46,46,36,36,29,29,25,25,27,27,31,31,39,39,48,48,57,57,64,64,70,70,73,73,74,74,74,74,74,74,74,74,75,75,75,75,75,75,73,73,69,69,64,64,58,58,50,50,41,41,32,32,24,24,19,19,16,16,13,13,12,12,10,10,8,8,5,5,4,4,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,6,6,10,10,16,16,25,25,37,37,51,51,67,67,82,82,94,94,103,103,107,107,106,106,100,100,91,91,81,81,70,70,58,58,46,46,36,36,29,29,25,25,25,25,30,30,37,37,46,46,55,55,62,62,68,68,71,71,72,72,72,72,72,72,72,72,73,73,74,74,74,74,72,72,69,69,64,64,57,57,49,49,39,39,30,30,22,22,16,16,13,13,10,10,8,8,6,6,5,5,4,4,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,6,6,10,10,16,16,25,25,38,38,53,53,69,69,85,85,98,98,107,107,110,110,108,108,102,102,92,92,82,82,70,70,58,58,46,46,36,36,28,28,24,24,25,25,29,29,36,36,44,44,52,52,59,59,64,64,67,67,68,68,68,68,68,68,69,69,71,71,72,72,74,74,73,73,70,70,64,64,57,57,48,48,38,38,29,29,21,21,14,14,10,10,7,7,6,6,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,6,6,10,10,16,16,26,26,38,38,54,54,71,71,87,87,101,101,110,110,113,113,110,110,103,103,93,93,82,82,70,70,58,58,47,47,36,36,29,29,25,25,25,25,29,29,35,35,43,43,50,50,56,56,61,61,63,63,64,64,64,64,64,64,65,65,68,68,71,71,73,73,72,72,70,70,64,64,56,56,46,46,36,36,27,27,19,19,12,12,8,8,6,6,4,4,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,5,5,7,7,11,11,18,18,27,27,40,40,56,56,73,73,89,89,103,103,111,111,114,114,111,111,103,103,93,93,81,81,69,69,57,57,47,47,37,37,31,31,27,27,28,28,31,31,37,37,44,44,51,51,56,56,59,59,61,61,61,61,61,61,61,61,63,63,66,66,70,70,72,72,72,72,70,70,63,63,55,55,45,45,34,34,24,24,17,17,11,11,7,7,5,5,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,4,4,5,5,7,7,9,9,14,14,20,20,30,30,42,42,57,57,74,74,89,89,102,102,110,110,112,112,109,109,101,101,91,91,79,79,67,67,56,56,47,47,38,38,33,33,30,30,31,31,34,34,40,40,47,47,53,53,57,57,60,60,60,60,60,60,59,59,60,60,62,62,65,65,69,69,72,72,72,72,69,69,62,62,53,53,43,43,32,32,22,22,15,15,9,9,6,6,4,4,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,5,5,6,6,8,8,10,10,13,13,18,18,24,24,33,33,45,45,59,59,74,74,88,88,99,99,106,106,108,108,104,104,97,97,87,87,76,76,65,65,55,55,46,46,39,39,34,34,32,32,33,33,37,37,43,43,50,50,56,56,60,60,62,62,62,62,61,61,60,60,60,60,62,62,66,66,70,70,73,73,73,73,69,69,62,62,52,52,41,41,30,30,20,20,13,13,8,8,5,5,4,4,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,5,5,6,6,8,8,10,10,12,12,15,15,18,18,23,23,29,29,38,38,49,49,61,61,74,74,86,86,95,95,100,100,101,101,98,98,91,91,82,82,72,72,61,61,52,52,45,45,38,38,35,35,33,33,34,34,39,39,45,45,52,52,58,58,62,62,63,63,63,63,62,62,61,61,61,61,63,63,67,67,71,71,74,74,74,74,69,69,61,61,50,50,39,39,28,28,18,18,12,12,7,7,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,4,4,5,5,7,7,10,10,12,12,15,15,17,17,21,21,24,24,29,29,35,35,44,44,53,53,64,64,74,74,83,83,90,90,94,94,94,94,91,91,85,85,77,77,68,68,58,58,49,49,42,42,36,36,33,33,31,31,33,33,37,37,44,44,51,51,58,58,62,62,64,64,64,64,63,63,62,62,63,63,65,65,69,69,73,73,76,76,75,75,70,70,61,61,50,50,37,37,26,26,17,17,10,10,6,6,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,4,4,6,6,8,8,11,11,15,15,18,18,21,21,24,24,27,27,31,31,36,36,42,42,49,49,57,57,66,66,74,74,81,81,85,85,87,87,87,87,84,84,79,79,72,72,63,63,54,54,45,45,38,38,32,32,29,29,28,28,29,29,34,34,41,41,48,48,54,54,59,59,62,62,63,63,63,63,63,63,64,64,66,66,71,71,75,75,78,78,77,77,71,71,61,61,49,49,36,36,25,25,16,16,9,9,6,6,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,4,4,7,7,9,9,13,13,17,17,22,22,25,25,29,29,32,32,34,34,38,38,42,42,47,47,54,54,61,61,69,69,75,75,80,80,82,82,83,83,82,82,79,79,74,74,67,67,59,59,50,50,41,41,34,34,28,28,24,24,23,23,25,25,29,29,35,35,42,42,48,48,53,53,57,57,59,59,60,60,61,61,64,64,67,67,73,73,78,78,80,80,79,79,72,72,62,62,49,49,35,35,24,24,15,15,9,9,5,5,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,5,5,7,7,10,10,14,14,19,19,24,24,30,30,34,34,37,37,39,39,41,41,43,43,47,47,52,52,58,58,64,64,70,70,75,75,78,78,79,79,79,79,78,78,75,75,70,70,63,63,54,54,45,45,36,36,29,29,23,23,20,20,18,18,20,20,23,23,29,29,35,35,41,41,46,46,50,50,53,53,56,56,59,59,62,62,67,67,73,73,79,79,81,81,79,79,73,73,61,61,48,48,34,34,23,23,14,14,8,8,4,4,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,6,7,7,8,8,11,11,15,15,20,20,26,26,32,32,38,38,42,42,45,45,46,46,47,47,47,47,50,50,54,54,60,60,65,65,71,71,74,74,77,77,78,78,77,77,75,75,71,71,66,66,58,58,50,50,40,40,32,32,25,25,19,19,16,16,14,14,15,15,17,17,22,22,27,27,33,33,38,38,42,42,46,46,50,50,55,55,60,60,66,66,73,73,78,78,81,81,79,79,71,71,60,60,46,46,33,33,21,21,12,12,7,7,4,4,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,3,3,5,5,7,7,8,8,9,9,10,10,12,12,15,15,20,20,26,26,33,33,40,40,46,46,50,50,52,52,51,51,50,50,50,50,51,51,55,55,60,60,65,65,70,70,73,73,75,75,75,75,74,74,72,72,68,68,62,62,54,54,44,44,35,35,27,27,20,20,15,15,12,12,10,10,11,11,13,13,16,16,20,20,25,25,29,29,34,34,38,38,44,44,49,49,56,56,64,64,71,71,76,76,78,78,76,76,68,68,57,57,43,43,30,30,19,19,11,11,6,6,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,2,2,3,3,5,5,8,8,10,10,13,13,14,14,15,15,17,17,20,20,25,25,31,31,38,38,45,45,51,51,55,55,56,56,54,54,51,51,50,50,50,50,54,54,58,58,63,63,67,67,70,70,72,72,72,72,71,71,69,69,64,64,57,57,48,48,39,39,30,30,22,22,16,16,12,12,9,9,8,8,8,8,9,9,12,12,15,15,18,18,22,22,26,26,31,31,37,37,44,44,52,52,60,60,67,67,72,72,74,74,71,71,63,63,53,53,40,40,28,28,17,17,10,10,5,5,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,2,4,4,7,7,11,11,15,15,19,19,20,20,21,21,22,22,24,24,29,29,34,34,41,41,48,48,53,53,56,56,56,56,53,53,49,49,47,47,47,47,50,50,55,55,59,59,63,63,65,65,67,67,67,67,66,66,63,63,58,58,51,51,42,42,33,33,25,25,18,18,13,13,9,9,7,7,6,6,6,6,7,7,8,8,11,11,13,13,16,16,20,20,25,25,31,31,39,39,47,47,56,56,63,63,67,67,68,68,65,65,57,57,47,47,36,36,24,24,15,15,9,9,5,5,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,6,6,10,10,15,15,21,21,25,25,27,27,27,27,27,27,27,27,30,30,34,34,40,40,45,45,50,50,52,52,51,51,48,48,44,44,41,41,41,41,44,44,49,49,53,53,57,57,59,59,60,60,60,60,58,58,55,55,50,50,43,43,35,35,27,27,20,20,14,14,10,10,7,7,5,5,4,4,4,4,5,5,6,6,8,8,10,10,12,12,15,15,20,20,26,26,34,34,43,43,51,51,58,58,62,62,62,62,58,58,51,51,42,42,31,31,21,21,13,13,7,7,4,4,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,7,7,12,12,19,19,26,26,31,31,33,33,32,32,29,29,28,28,29,29,31,31,35,35,39,39,43,43,44,44,43,43,40,40,37,37,34,34,34,34,36,36,40,40,44,44,48,48,50,50,50,50,50,50,49,49,46,46,41,41,35,35,28,28,21,21,16,16,11,11,8,8,6,6,4,4,4,4,4,4,4,4,5,5,6,6,8,8,10,10,12,12,16,16,22,22,30,30,38,38,47,47,53,53,57,57,56,56,53,53,46,46,36,36,27,27,18,18,11,11,6,6,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,8,8,14,14,22,22,30,30,35,35,36,36,34,34,30,30,27,27,26,26,26,26,28,28,31,31,33,33,34,34,33,33,31,31,28,28,25,25,25,25,28,28,31,31,35,35,37,37,39,39,40,40,39,39,38,38,36,36,32,32,27,27,21,21,16,16,12,12,9,9,6,6,5,5,4,4,3,3,3,3,4,4,5,5,6,6,7,7,8,8,11,11,14,14,20,20,27,27,35,35,43,43,49,49,53,53,52,52,48,48,41,41,32,32,23,23,15,15,9,9,5,5,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,8,8,15,15,23,23,31,31,37,37,37,37,34,34,28,28,24,24,21,21,20,20,21,21,22,22,23,23,24,24,23,23,21,21,19,19,18,18,18,18,19,19,22,22,25,25,27,27,28,28,29,29,29,29,28,28,27,27,24,24,20,20,16,16,12,12,9,9,7,7,5,5,4,4,4,4,3,3,4,4,4,4,5,5,6,6,7,7,8,8,10,10,14,14,19,19,25,25,33,33,41,41,47,47,50,50,48,48,44,44,36,36,27,27,19,19,12,12,7,7,4,4,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,8,8,15,15,23,23,30,30,35,35,35,35,31,31,25,25,20,20,16,16,15,15,14,14,15,15,15,15,16,16,15,15,14,14,13,13,12,12,12,12,13,13,15,15,17,17,19,19,20,20,21,21,21,21,20,20,19,19,17,17,14,14,11,11,9,9,7,7,5,5,5,5,4,4,4,4,4,4,4,4,5,5,6,6,7,7,8,8,9,9,11,11,15,15,20,20,26,26,34,34,41,41,46,46,48,48,46,46,41,41,33,33,24,24,16,16,10,10,6,6,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,8,8,13,13,20,20,27,27,31,31,31,31,27,27,21,21,16,16,12,12,10,10,10,10,10,10,10,10,10,10,10,10,9,9,8,8,7,7,8,8,9,9,10,10,12,12,13,13,14,14,15,15,15,15,15,15,14,14,12,12,10,10,8,8,7,7,6,6,5,5,5,5,4,4,5,5,5,5,6,6,7,7,8,8,9,9,10,10,11,11,14,14,17,17,23,23,29,29,36,36,43,43,47,47,48,48,45,45,38,38,29,29,21,21,13,13,8,8,4,4,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,7,7,11,11,17,17,23,23,26,26,26,26,23,23,18,18,13,13,10,10,8,8,7,7,7,7,7,7,7,7,7,7,6,6,5,5,5,5,6,6,6,6,8,8,9,9,11,11,12,12,12,12,12,12,12,12,11,11,10,10,9,9,7,7,6,6,5,5,5,5,5,5,5,5,6,6,7,7,9,9,10,10,11,11,13,13,14,14,16,16,18,18,22,22,28,28,34,34,41,41,47,47,49,49,49,49,44,44,36,36,27,27,18,18,11,11,7,7,4,4,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,5,5,9,9,14,14,18,18,21,21,21,21,18,18,14,14,11,11,8,8,6,6,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,6,6,7,7,9,9,10,10,11,11,12,12,12,12,12,12,11,11,9,9,8,8,6,6,6,6,5,5,5,5,6,6,7,7,9,9,10,10,12,12,15,15,17,17,18,18,20,20,22,22,25,25,29,29,34,34,40,40,46,46,50,50,51,51,49,49,42,42,33,33,24,24,16,16,10,10,5,5,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,4,4,7,7,11,11,14,14,16,16,16,16,14,14,11,11,9,9,6,6,5,5,5,5,4,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,5,5,7,7,9,9,11,11,12,12,13,13,13,13,13,13,12,12,10,10,9,9,7,7,6,6,6,6,7,7,8,8,10,10,12,12,15,15,18,18,21,21,24,24,27,27,29,29,31,31,33,33,37,37,42,42,47,47,51,51,53,53,52,52,48,48,40,40,31,31,22,22,14,14,8,8,5,5,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,6,6,8,8,11,11,13,13,13,13,11,11,9,9,7,7,5,5,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,4,4,5,5,8,8,10,10,12,12,14,14,15,15,16,16,16,16,15,15,12,12,10,10,8,8,7,7,7,7,8,8,10,10,13,13,17,17,21,21,26,26,30,30,34,34,37,37,40,40,42,42,44,44,47,47,50,50,53,53,55,55,54,54,51,51,45,45,37,37,27,27,19,19,12,12,7,7,4,4,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,4,4,6,6,8,8,9,9,10,10,9,9,7,7,5,5,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,6,6,8,8,11,11,14,14,17,17,19,19,20,20,20,20,18,18,16,16,13,13,10,10,9,9,9,9,11,11,14,14,18,18,23,23,29,29,35,35,41,41,46,46,50,50,52,52,53,53,55,55,56,56,57,57,57,57,57,57,54,54,49,49,42,42,33,33,24,24,16,16,10,10,6,6,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,5,5,6,6,7,7,7,7,6,6,5,5,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,3,3,4,4,6,6,9,9,12,12,16,16,20,20,23,23,25,25,25,25,24,24,20,20,16,16,13,13,11,11,12,12,14,14,18,18,23,23,30,30,37,37,45,45,52,52,58,58,61,61,63,63,63,63,63,63,62,62,61,61,59,59,56,56,52,52,45,45,37,37,29,29,20,20,14,14,8,8,5,5,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,4,4,5,5,5,5,5,5,5,5,4,4,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,6,6,10,10,14,14,18,18,23,23,27,27,31,31,32,32,30,30,26,26,21,21,17,17,15,15,16,16,19,19,25,25,31,31,39,39,47,47,56,56,63,63,69,69,71,71,71,71,70,70,68,68,65,65,62,62,58,58,53,53,47,47,40,40,32,32,24,24,17,17,11,11,7,7,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4,4,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,7,7,10,10,15,15,21,21,27,27,32,32,37,37,39,39,38,38,33,33,27,27,22,22,20,20,22,22,26,26,33,33,40,40,48,48,57,57,66,66,73,73,77,77,77,77,75,75,71,71,67,67,62,62,57,57,52,52,46,46,40,40,34,34,26,26,20,20,13,13,9,9,6,6,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,5,5,7,7,12,12,17,17,23,23,30,30,37,37,43,43,46,46,45,45,40,40,33,33,28,28,26,26,28,28,34,34,41,41,49,49,58,58,66,66,74,74,80,80,82,82,80,80,75,75,68,68,61,61,54,54,48,48,42,42,37,37,32,32,26,26,20,20,15,15,10,10,7,7,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,5,5,8,8,13,13,19,19,26,26,33,33,41,41,47,47,51,51,49,49,44,44,37,37,32,32,31,31,34,34,41,41,49,49,57,57,65,65,73,73,79,79,82,82,82,82,77,77,69,69,60,60,51,51,43,43,37,37,31,31,27,27,23,23,18,18,14,14,11,11,7,7,5,5,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,6,6,9,9,15,15,21,21,28,28,35,35,43,43,49,49,52,52,50,50,45,45,38,38,34,34,34,34,38,38,45,45,53,53,60,60,67,67,74,74,78,78,79,79,76,76,69,69,60,60,50,50,40,40,32,32,26,26,21,21,18,18,15,15,12,12,9,9,7,7,5,5,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,6,6,10,10,15,15,22,22,28,28,35,35,42,42,48,48,50,50,49,49,43,43,37,37,33,33,34,34,38,38,44,44,51,51,58,58,63,63,68,68,70,70,70,70,66,66,58,58,48,48,38,38,29,29,22,22,17,17,13,13,11,11,9,9,7,7,6,6,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,6,6,10,10,15,15,21,21,28,28,34,34,40,40,45,45,46,46,44,44,39,39,34,34,30,30,31,31,35,35,40,40,45,45,50,50,53,53,56,56,57,57,55,55,51,51,44,44,36,36,27,27,20,20,14,14,10,10,8,8,6,6,5,5,4,4,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,5,5,9,9,14,14,19,19,25,25,31,31,36,36,40,40,41,41,38,38,34,34,29,29,26,26,26,26,28,28,32,32,36,36,38,38,40,40,41,41,41,41,39,39,36,36,30,30,24,24,18,18,13,13,9,9,6,6,4,4,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,5,5,8,8,12,12,17,17,22,22,27,27,31,31,34,34,34,34,32,32,27,27,23,23,20,20,19,19,21,21,23,23,26,26,27,27,27,27,27,27,27,27,25,25,22,22,19,19,15,15,11,11,8,8,5,5,4,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,4,4,6,6,9,9,13,13,18,18,22,22,25,25,27,27,27,27,24,24,21,21,17,17,14,14,13,13,14,14,15,15,16,16,17,17,17,17,16,16,16,16,14,14,13,13,10,10,8,8,6,6,4,4,3,3,2,2,2,2,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,5,5,7,7,10,10,13,13,16,16,19,19,20,20,19,19,17,17,14,14,11,11,9,9,9,9,9,9,9,9,10,10,10,10,9,9,9,9,8,8,8,8,7,7,6,6,4,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,5,5,7,7,9,9,11,11,12,12,13,13,13,13,11,11,9,9,7,7,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,4,4,6,6,7,7,8,8,8,8,8,8,7,7,5,5,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

    for (let ix = 0; ix < AMOUNTX; ix++) {
      let num = 0
      for (let iy = 0; iy < AMOUNTY; iy++) {
        num += bigArrg[ix * AMOUNTY + iy]
      }
      bodyArr.push(parseInt(num / AMOUNTY))
    }

    props.handleChartsBody(bodyArr, ymax1)



    let dataArr = []


    let k = 0,
      l = 0;



    for (let ix = 0; ix < AMOUNTX; ix++) {
      for (let iy = 0; iy < AMOUNTY; iy++) {
        // const value = bigArrg1New[l] * 10;
        const value = iy*3
        //柔化处理smooth
        smoothBig[l] = smoothBig[l] + (value - smoothBig[l]) / valuel1;

        positions[k] = ix * SEPARATION - (AMOUNTX * SEPARATION) / 2; // x
        positions[k + 1] = smoothBig[l] / value1; // y
        positions[k + 2] = iy * SEPARATION - (AMOUNTY * SEPARATION) / 2; // z
        let rgb

        if (sitIndexArr && !sitIndexArr.every((a) => a == 0)) {

          if (ix >= sitIndexArr[0] && ix < sitIndexArr[1] && iy >= sitIndexArr[2] && iy < sitIndexArr[3]) {
            // rgb = [255, 0, 0];
            rgb = jet(0, valuej1, smoothBig[l]);
            // scales1[l] = 2;
            // positions1[k + 1] = smoothBig[l] / value2 - 1000
            dataArr.push(bigArrg1New[l])
          } else {
            rgb = jetgGrey(0, valuej1, smoothBig[l]);
            // scales1[l] = 1;
          }
        } else {
          rgb = jet(0, valuej1, smoothBig[l]);
          // scales1[l] = 1;
        }

        colors[k] = rgb[0] / 255;
        colors[k + 1] = rgb[1] / 255;
        colors[k + 2] = rgb[2] / 255;

        k += 3;
        l++;
      }
    }
    if (!sitIndexArr.length || sitIndexArr.every((a) => a == 0)) {
      dataArr = bigArrg
    }


    var T = clock.getDelta();
    timeS = timeS + T;
    if (timeS > renderT) {
      dataArr = dataArr.filter((a) => a > valuej1 * 0.025)
      const max = findMax(dataArr)
      const point = dataArr.filter((a) => a > 0).length
      const press = dataArr.reduce((a, b) => a + b, 0)
      const mean = press / (point == 0 ? 1 : point)
      props.data.current?.changeData({
        meanPres: mean.toFixed(2),
        maxPres: max,
        point: point,
        // area: areaSmooth.toFixed(0),
        totalPres: press,
        // pressure: pressureSmooth.toFixed(2),
      });

      if (totalArr.length < 20) {
        totalArr.push(press);
      } else {
        totalArr.shift();
        totalArr.push(press);
      }

      const maxTotal = findMax(totalArr);

      if (!props.local)
        props.data.current?.handleCharts(totalArr, maxTotal + 1000);

      if (totalPointArr.length < 20) {
        totalPointArr.push(point);
      } else {
        totalPointArr.shift();
        totalPointArr.push(point);
      }

      const max1 = findMax(totalPointArr);
      if (!props.local){props.data.current?.handleChartsArea(totalPointArr, max1 + 100);}
      timeS = 0;
    }
    particles.geometry.attributes.position.needsUpdate = true;
    particles.geometry.attributes.color.needsUpdate = true;

    sitGeometry.setAttribute(
      "position",
      new THREE.BufferAttribute(positions, 3)
    );
    sitGeometry.setAttribute("color", new THREE.BufferAttribute(colors, 3));
  }

  function render() {
    // particlesPoint.position.x = -10 + 48
    // particlesPoint.position.z = -19 + 38.5
    if (particlesPoint) {
      particlesPoint.position.x = -10 + (48) * cooArr[0] / 32
      particlesPoint.position.z = -19 + (38.5) * cooArr[1] / 32
    }
    if (centerFlag) {
      particlesPoint.visible = false
    } else {
      particlesPoint.visible = true
    }


    sitRenew();
    if (controlsFlag) {
      controls.mouseButtons = {
        LEFT: THREE.MOUSE.PAN, // make pan the default instead of rotate
        MIDDLE: THREE.MOUSE.ZOOM,
        RIGHT: THREE.MOUSE.ROTATE,
      };
      controls.keys = [
        ALT_KEY, // orbit
        CTRL_KEY, // zoom
        CMD_KEY, // pan
      ];
      controls.update();
    } else if (!controlsFlag) {
      // console.log('111')
      controls.keys = [];
      controls.mouseButtons = [];
    }

    renderer.render(scene, camera);
  }

  function logData() {
    console.log(JSON.stringify(bodyArr))
  }

  //   靠背数据
  // 座椅数据
  function sitValue(prop) {

    const { valuej, valueg, value, valuel, valuef, valuelInit, ymax } = prop;
    if (valuej) valuej1 = valuej;
    if (valueg) valueg1 = valueg;
    if (value) value1 = value;
    if (valuel) valuel1 = valuel;
    if (valuef) valuef1 = valuef;
    if (valuelInit) valuelInit1 = valuelInit;
    if (ymax) ymax1 = ymax;

  }
  function sitData(prop) {


    const {
      wsPointData: wsPointData,
      arr
    } = prop;
    if (arr) cooArr = arr
    newData1 = wsPointData;



  }

  function changeGroupRotate(obj) {

    if (typeof obj.x === 'number') {
      group.rotation.x = -((obj.x) * 6) / 12
    }
    if (typeof obj.z === 'number') {
      group.rotation.z = (obj.z) * 6 / 12
    }
  }

  function changeCenterFlag(value) {
    centerFlag = value
  }

  function changeSelectFlag(value) {
    controlsFlag = value
    selectHelper.isShiftPressed = !value
  }

  function reset() {

    camera.position.z = 300;
    camera.position.y = 200;
    camera.position.x = 0;
    camera.rotation._x = 0;
    camera.rotation._y = 0;
    camera.rotation._z = 0;

    // camera = new THREE.PerspectiveCamera(
    //   40,
    //   window.innerWidth / window.innerHeight,
    //   1,
    //   150000
    // );


    // camera.position.z = 300;
    // camera.position.y = 200;

    // camera.position.set(0,200,300)

    // renderer.render(scene, camera);

    group.rotation.x = -(Math.PI * 2) / 12
    group.rotation.y = 0
    group.position.x = -15
    group.position.y = 150
    group.position.z = 230
  }

  useImperativeHandle(refs, () => ({

    sitData: sitData,
    changeDataFlag: changeDataFlag,
    sitValue,
    logData,
    sitRenew,
    changeGroupRotate,
    reset,
    changeSelectFlag,
    changeCenterFlag
    // actionAll: actionAll,
    // actionSit: actionSit,
    // actionBack: actionBack,
  }));
  //   视图数据

  function onKeyDown(event) {
    if (event.key === 'Shift') {
      // enableControls = false;
      // isShiftPressed = true;

      controls.mouseButtons = null
      controls.keys = null
    }
  }

  // 按键放开事件处理函数
  function onKeyUp(event) {
    if (event.key === 'Shift') {
      // enableControls = true;
      // isShiftPressed = false;
      controls.mouseButtons = {
        LEFT: THREE.MOUSE.PAN, // make pan the default instead of rotate
        MIDDLE: THREE.MOUSE.ZOOM,
        RIGHT: THREE.MOUSE.ROTATE,
      };
      controls.keys = [
        ALT_KEY, // orbit
        CTRL_KEY, // zoom
        CMD_KEY, // pan
      ];
    }
  }





  const changeValue = (obj) => { };
  useEffect(() => {
    // 靠垫数据

    init();
    // window.addEventListener("mousemove", () => {}, false);
    animate();


    window.addEventListener('keydown', onKeyDown);
    window.addEventListener('keyup', onKeyUp);

    return () => {
      cancelAnimationFrame(animationRequestId);
      document.removeEventListener('pointerdown', pointDown)
      document.removeEventListener('pointermove', pointMove)
      document.removeEventListener('pointup', pointUp)
      selectHelper.dispose()
    };
  }, []);
  return (
    <div>
      <div

        id={`canvas`}
      ></div>
    </div>
  );
});
export default Canvas;
